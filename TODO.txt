Ideas and roadmap
-----------------
[x] Add #systemProperties variable

[ ] ELK adds an automatic correlation to MDC using agent instrumentation:
    https://www.elastic.co/guide/en/apm/agent/java/current/log-correlation.html.
    Adds these MDC parameters are automÃ¡tically added:
        - transaction.id
        - trace.id
        - error.id
    How to convert Java logs to ELK format: https://www.elastic.co/guide/en/ecs-logging/java/1.x/setup.html

[x] Access to private fields in local bean?

[ ] Add support for jboss-log-manager?

[?] Use Agent or Annotation Processor instead of AOP?
    https://blog.jcore.com/2016/12/modify-java-8-final-behaviour-with-annotations/
    Java TreeTranslator is a compiler's internal API!

[ ] Copy MDC state to another MDC context.
    [ ] Add support for Spring @Async annotation

[x] Parent-child parameters overwrite: when the child MDC is closed restore parent's params values that were overwritten by child MDC

[x] Document all public API

[ ] Readme.md

[x] How to maintain method arguments' names after compilation (debug information)
    Add -parameters argument to javac.
    Already resolved in Spring Boot Plugin
    https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/

[x] Class MDC: add lambda-based MDC definitions:
    MDC.with()
        .param("param1", "value1")
        .param("param2", "value2")
        .run(() -> {
            ...
        });
    MDC.runWith(() -> {
        ...
    })

[x] Add MDC.rootParam() to put param into root MDC.

[x] Refactor annotations: allow multiple @MDCParam annotations on method or bean.
    @MDCParam(name = "param1", eval = "...");
    @MDCParam(name = "param2", eval = "...");
    public void myMethod(@MDCParam param3)

[x] Behavioral changes: create new MDC context only with explicit definition @WithMDC.
    Any call to a method annotated with @MDCParam and without @WithMDC will set parameters on current MDC.
    After the method exits all parameters must be removed explicitly.

[x] Refactor detection of logging subsystem

[x] Support for local calls.
    - Using AspectJ?
        AspectJ uses compile-time or runtime weaving. In first case it requires a maven plugin to enhance classes.
        In second case it requires an agent specified at JVM start. Both of them significally complicate the usage.
    [x] Try: Spring AOP also intercepts protected and package-private methods?
